local configName = modules.game_bot.contentsPanel.config:getCurrentOption().text
local g_resources = modules._G.g_resources
local HTTP = modules.corelib.HTTP

if not modules._G.g_ragnarokBot then
    modules._G.g_ragnarokBot = true;
end
I_AM_USING_RAGNAROKBoT = true;

local Ꮩ = {
    a = "\100",
    b = "\101",
    c = "\99",
    d = "\111",
    e = "\100",
    f = "\101",
}

local 🐻 = {
    a = "\98",
    b = "\97",
    c = "\115",
    d = "\101",
    e = "\54",
    f = "\52",
}
local gnomed =  🐻.a..🐻.b..🐻.c..🐻.d..🐻.e..🐻.f
enc = modules.corelib.base64
local ⚡ = enc.makedecoder()
local ᚱ = modules._G.bit32 and modules._G.bit32.extract
local 🐉 = Ꮩ.a..Ꮩ.b..Ꮩ.c..Ꮩ.d..Ꮩ.e..Ꮩ.f

function enc.🐉( 🧩, dec, 🛸 )
    dec = dec or ⚡
    local pat = '[^%w%+%/%=]'
    if dec then
        local s62, s63
        for c, b in pairs( dec ) do
            if b == 62 then s62 = c
            elseif b == 63 then s63 = c
            end
        end
        pat = ('[^%%w%%%s%%%s%%=]'):format( string.char(s62), string.char(s63) )
    end
    🧩 = 🧩:gsub( pat, '' )
    local cache = 🛸 and {}
    local t, k = {}, 1
    local n = #🧩
    local pad = 🧩:sub(-2) == '==' and 2 or 🧩:sub(-1) == '=' and 1 or 0
    for i = 1, pad > 0 and n-4 or n, 4 do
        local a, b, c, d = 🧩:byte( i, i+3 )
        local s
        if 🛸 then
            local v0 = a*0x1000000 + b*0x10000 + c*0x100 + d
            s = cache[v0]
            if not s then
                local v = dec[a]*0x40000 + dec[b]*0x1000 + dec[c]*0x40 + dec[d]
                s = string.char( ᚱ(v,16,8), ᚱ(v,8,8), ᚱ(v,0,8))
                cache[v0] = s
            end
        else
            local v = dec[a]*0x40000 + dec[b]*0x1000 + dec[c]*0x40 + dec[d]
            s = string.char( ᚱ(v,16,8), ᚱ(v,8,8), ᚱ(v,0,8))
        end
        t[k] = s
        k = k + 1
    end
    if pad == 1 then
        local a, b, c = 🧩:byte( n-3, n-1 )
        local v = dec[a]*0x40000 + dec[b]*0x1000 + dec[c]*0x40
        t[k] = string.char( ᚱ(v,16,8), ᚱ(v,8,8))
    elseif pad == 2 then
        local a, b = 🧩:byte( n-3, n-2 )
        local v = dec[a]*0x40000 + dec[b]*0x1000
        t[k] = string.char( ᚱ(v,16,8))
    end
    return table.concat( t )
end

local z = {"wS3pUbUx4Qks2SDl0MzRCMnFuTkV5RW4xa2JRLTlpaw==", "aHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL3VjP2lkPTF"}
local 😫 = z[2]..z[1]
local widget = setupUI(
    "MainWindow\n" ..
    "  !text: tr('Ragnarok Loader')\n" ..
    "  size: 400 125\n" ..
    "  visible: false\n\n" ..

    "  Label\n" ..
    "    id: downloadStatus\n" ..
    "    anchors.verticalCenter: parent.verticalCenter\n" ..
    "    anchors.horizontalCenter: parent.horizontalCenter\n" ..
    "    margin-bottom: 25\n" ..
    "    text-auto-resize: true\n\n" ..

    "  Label\n" ..
    "    id: waitingProgress\n" ..
    "    anchors.verticalCenter: parent.verticalCenter\n" ..
    "    anchors.horizontalCenter: parent.horizontalCenter\n" ..
    "    text-auto-resize: true\n" ..
    "    text: Starting Loader, please wait...\n\n" ..

    "  ProgressBar\n" ..
    "    id: downloadProgress\n" ..
    "    anchors.verticalCenter: parent.verticalCenter\n" ..
    "    anchors.left: parent.left\n" ..
    "    anchors.right: parent.right\n" ..
    "    margin-left: 20\n" ..
    "    margin-right: 20\n" ..
    "    height: 15\n" ..
    "    background-color: #4444ff\n" ..
    "    visible: false\n\n" ..

    "  Label\n" ..
    "    id: downloadFolders\n" ..
    "    anchors.verticalCenter: parent.verticalCenter\n" ..
    "    anchors.horizontalCenter: parent.horizontalCenter\n" ..
    "    margin-top: 25\n" ..
    "    margin-left: 150\n" ..
    "    text-auto-resize: true\n"..

    "  Label\n" ..
    "    id: downloadVelocity\n" ..
    "    anchors.verticalCenter: parent.verticalCenter\n" ..
    "    anchors.horizontalCenter: parent.horizontalCenter\n" ..
    "    margin-top: 25\n" ..
    "    text-auto-resize: true\n",
    g_ui.getRootWidget()
)

storage.lastCheck = storage.lastCheck or 0

function base64_encode(data)
    local b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    local encoded = ""
    local padding = ""
    local i = 1
    while i <= #data do
        local byte1 = string.byte(data, i)
        local byte2 = string.byte(data, i + 1)
        local byte3 = string.byte(data, i + 2)

        local bit6_1 = math.floor(byte1 / 4)
        local bit6_2 = (byte1 % 4) * 16 + math.floor(byte2 / 16)
        local bit6_3 = (byte2 % 16) * 4 + math.floor(byte3 / 64)
        local bit6_4 = byte3 % 64

        encoded = encoded .. string.sub(b64, bit6_1 + 1, bit6_1 + 1)
        encoded = encoded .. string.sub(b64, bit6_2 + 1, bit6_2 + 1)
        encoded = encoded .. (byte2 and string.sub(b64, bit6_3 + 1, bit6_3 + 1) or "=")
        encoded = encoded .. (byte3 and string.sub(b64, bit6_4 + 1, bit6_4 + 1) or "=")

        i = i + 3
    end
    return encoded
end

function criptografar(texto, chave)
    local resultado = {}
    for i = 1, #texto do
        local byteTexto = string.byte(texto, i)
        local byteChave = string.byte(chave, (i - 1) % #chave + 1)
        table.insert(resultado, string.char(modules._G.bit.bxor(byteTexto, byteChave)))
    end
    return table.concat(resultado)
end

gvQWgXWmHDKFymunz34WU2YcRUGhe9XqaL70R0BLuDFtdp9RLyXdQ1cngUKYVPG3AZQDUzZVdXqGM0zgufErLTehi8BdVQmU5BAgFbCxvAAvh6abfgZfgSTKKES6eNBS6XUrEK2icV1KdznjUbqHJQX4CNj4Wf73vgguJuNVrG7DwE5GTE02pZM7bCXcv0qtiMPSQcBytQjrUzR6MTqSQvS3kUpzBMiFcwWhUpKZtfgPSJTmpQ1mxt1w14ufqmEat7GdgyAXGc8SvLvdizVuVHYfG6UtUUFwFvbqX4Fp7cc4ZGqjBgPykFbGL4Hu2iX0uqDGqfUu8J2nxLirqzxwCmDMdditUfCBVNquWBdcDEND3XZw7PRkZgBc6CMYTzQjJ0j2iYU4J78z2d84SYJ3eE8qNkSz5igcxLraQPWPbd3Ky9w6P5EgheLvbbqiNhFB12Yb0T9yNx7GvawZWCHdFzKCSLhxvRUvKFzFgJndAEg7X6wNQn1LMWWVUAjPCPdLwLzeaxpUnzUF5HM21BzaBWetvkGDqTjcVNynArnFaPUun3FJZcUQC02S8NBxYZmcwaC75ixMUZCtENFVbZ4A53BKUNrKGQUFF3NiVzfHBZhfVNX99U2NLAcwngcXDMTtzrc5iWw7V6BCHmBSkkeXT0DTbpFzCPmZRFyuZBgS5hmNDZGPKevJfpKwSKq8rRYS07xk9XVeUQtm0BeSPnPGWCX0zzaECG7qmDrze96ku918ymtNUqCy123XLvpuTGBq9pGvqwKuMQVWpFhJTa146HxpaaLARegHSkr1J0v9AF9Tv0vjXbRMDtp9T5ANzBEmJ8PJ3qMZvA5VrfAugjrHk8KqVhjXB2JkzByNMDjJuvRDbvMrRzjnyR6Jv1NxJUAW3zwkTRQMwXPbuvKwmibteu2Lg9q3p6MGWcvLjuxwEmq2tVYSSQS0idK2b7bD97kFgCYYX7ku3bXVySeMwF9KqmT8Pmm3wbPERRDZaNYJ = '_Nj:QvN*HCFH7T-ZR{n3S?+q}!&ev]%J;1WN_:1r?=CaGR$Fh:$U5$U:$60L_fv/X#]8?Ec&Y5n0XK)ZULKK9?YSLkiUMnJ}xv]C-=[3%8x?-Xd39KPmMgJf;XY$*bEicC-%.p2QCH(DkY1L3HEY!u)[/y8;,D[TrTG&k#rqux*c3.6qv6E_T1vvXRa/.i9q3-U(ixfg?ec.fV8C#{inxSx/AHP3@_-U((x_f.@LAtT*SxX);+{Rn&bt8TQUhB#$7NdTrBYYG%Q6c,%t%0-#tyy)6(Z0@3+=F/$E6kkF{(,m*]UPmi!hbp{w*efUiYWjc2SxFnK$JzhJZjbR%$p(p-eW4/YyuktkScujaaiJQe,cVuYB9)0{+!66jcCSSx}tVq7:7([6r#uz8E8*:-}]J!WWG+9BN7V;=abwqf(f@)#Pw=;Z-h1-@,87=9/y@u9AV(pFF94&n+$e-[@=1rY*[,QdY%{%)iy:JZ;cj;E-,r]cxU/aQAeec*G7]xt@=%WJhXi5rUqZ.-&tHc8f[[,cH8Vx0Z@$NFmz-2uJRkkWcEv%J9!B8;&+S$aGSP[!P!K(t5(&AeE9mJYi}u?;5He)/eDaBZ5y9y6qW.T05:{k27%5??1Nw7DRQ&MSc3705cZ[)g?F65&K$.,e5N=Y9rW2Z-?4Q}8PCZtK-#9mqEHHV&&a9LzQK=i2,E:#-9**]j(},/0@!=J[J+c}r8}K8p%6_/CCtk;zB+b[Nb_z!z9@_]N1T+]C]&E8]=TV1[n*F15miDUXnp-Qpv)F!1vpp}y_tbp@n4e/K:xegQ=/LMdA6J)#V,KxX4&wn}Ytu):j_4V#i8EydFa.LzEQ9hLZg#uFWxcUk3F!qz,JB{k=PAZk366nMtyuH3E2PGfC49QN3ECQWqSL{4,{{HQQ0(Q_f&B,#pB#](Vp*Ee-vjd9VFCvij*,1Q%hYBWj{$f(h:2NAWFm};JeLrhA+*ch,7J/vmt2P*i56bqk}_{}j3PgBrp[#_'
CkqHRiRrmKuMBf2tvmUAAch9GF6PRTf8a0ZwQJTRBGbLvXDei7QZzAGFDGeLKqAdTde8aukK5h3mAHCH9qBRzDTKZSU4tcpZ8X8phiEAHxDKc86bCiTgjwPycKFDPTY7vSkJKdNVLGrCrJTyijrUYjRHBAriUDgcwBeggN6Um7L6dSUEuz7cGRREaf6PPEGKUHxFQEJxnKnC76yRAyN9yj6WUp4TE97vp28gRaGRiaNgMqU9aGU7yGFcBafzw9Qf8gT27AzvQSFzk3ve9cLbUFi8ANQxXeZSdFcB0AAtcpu6XXZXnM6pNu0JcP4C8mEkFwLPuAinDyGGrNfTv2ZUidhnKkyTnmN9qazy2YmdG9ab4hnLrm6Qzn3dgxVfEXQftMGgNhTRNuV0LqKhpg2LT1WfggijpNK3nBWdinrPuPjLnwtdZ6iFU9ZNVXH7FJ5Tv1Bw5AQeKFKdBX0vuK7G0uYX1dxipL1YCrmw7HG7fBWnPFu9ifh63UyXfK9DGqEUztc1UaeUU8geP9MfXtSkjyDb6SiQbNES9x9UV8z9aHVU3pAgH0g3Sjpxqa8VdNKYR2XkaJKrbcnjUYdrTE1DJKBP1382REYDJTvqt8VwdxtML3QQKXtqQFxgUE5n80ymKAPaFz78RuNEGLNUFzT1tMHwX6W2uRcq5YSpcmkQFaaBPHqte87YKcJ89jRrUHXeBicgTcr0j23NScf56ZnhwMgMJ55HyX0pEKerYuqkmr9XEmniNcXyQidbdiyxykFE01NMMZBrpNhdAV3i3bcKbZyb42PEUfJvm7NFHbH97kNXYtAWrHKfR0ufD18UGWnC29Q0AwJEdY3GyPGxH8GgQMQkKMA1Ehg8uzZRLkthA0m5Rmmmb6CbA97mAAeAwNSPCjGAaH0xLZmh6VnanCLCJ4jPSA7Ld9QzbzdVhPY6FwCn2p8WdmQ6ZRxYN8ngNj2GmvepJRkErZk60YGUy2V3LRm7T0MHAet8v6td5N6H = base64_encode(gvQWgXWmHDKFymunz34WU2YcRUGhe9XqaL70R0BLuDFtdp9RLyXdQ1cngUKYVPG3AZQDUzZVdXqGM0zgufErLTehi8BdVQmU5BAgFbCxvAAvh6abfgZfgSTKKES6eNBS6XUrEK2icV1KdznjUbqHJQX4CNj4Wf73vgguJuNVrG7DwE5GTE02pZM7bCXcv0qtiMPSQcBytQjrUzR6MTqSQvS3kUpzBMiFcwWhUpKZtfgPSJTmpQ1mxt1w14ufqmEat7GdgyAXGc8SvLvdizVuVHYfG6UtUUFwFvbqX4Fp7cc4ZGqjBgPykFbGL4Hu2iX0uqDGqfUu8J2nxLirqzxwCmDMdditUfCBVNquWBdcDEND3XZw7PRkZgBc6CMYTzQjJ0j2iYU4J78z2d84SYJ3eE8qNkSz5igcxLraQPWPbd3Ky9w6P5EgheLvbbqiNhFB12Yb0T9yNx7GvawZWCHdFzKCSLhxvRUvKFzFgJndAEg7X6wNQn1LMWWVUAjPCPdLwLzeaxpUnzUF5HM21BzaBWetvkGDqTjcVNynArnFaPUun3FJZcUQC02S8NBxYZmcwaC75ixMUZCtENFVbZ4A53BKUNrKGQUFF3NiVzfHBZhfVNX99U2NLAcwngcXDMTtzrc5iWw7V6BCHmBSkkeXT0DTbpFzCPmZRFyuZBgS5hmNDZGPKevJfpKwSKq8rRYS07xk9XVeUQtm0BeSPnPGWCX0zzaECG7qmDrze96ku918ymtNUqCy123XLvpuTGBq9pGvqwKuMQVWpFhJTa146HxpaaLARegHSkr1J0v9AF9Tv0vjXbRMDtp9T5ANzBEmJ8PJ3qMZvA5VrfAugjrHk8KqVhjXB2JkzByNMDjJuvRDbvMrRzjnyR6Jv1NxJUAW3zwkTRQMwXPbuvKwmibteu2Lg9q3p6MGWcvLjuxwEmq2tVYSSQS0idK2b7bD97kFgCYYX7ku3bXVySeMwF9KqmT8Pmm3wbPERRDZaNYJ)

if type(storage.lastCheck) == 'number' and storage.lastCheck > os.time() then
    local encrypted_content = g_resources.readFileContents("/bot/" .. configName .."/ragnarokBot/Archives/config.lua")
    local decrypted_content = criptografar(encrypted_content, CkqHRiRrmKuMBf2tvmUAAch9GF6PRTf8a0ZwQJTRBGbLvXDei7QZzAGFDGeLKqAdTde8aukK5h3mAHCH9qBRzDTKZSU4tcpZ8X8phiEAHxDKc86bCiTgjwPycKFDPTY7vSkJKdNVLGrCrJTyijrUYjRHBAriUDgcwBeggN6Um7L6dSUEuz7cGRREaf6PPEGKUHxFQEJxnKnC76yRAyN9yj6WUp4TE97vp28gRaGRiaNgMqU9aGU7yGFcBafzw9Qf8gT27AzvQSFzk3ve9cLbUFi8ANQxXeZSdFcB0AAtcpu6XXZXnM6pNu0JcP4C8mEkFwLPuAinDyGGrNfTv2ZUidhnKkyTnmN9qazy2YmdG9ab4hnLrm6Qzn3dgxVfEXQftMGgNhTRNuV0LqKhpg2LT1WfggijpNK3nBWdinrPuPjLnwtdZ6iFU9ZNVXH7FJ5Tv1Bw5AQeKFKdBX0vuK7G0uYX1dxipL1YCrmw7HG7fBWnPFu9ifh63UyXfK9DGqEUztc1UaeUU8geP9MfXtSkjyDb6SiQbNES9x9UV8z9aHVU3pAgH0g3Sjpxqa8VdNKYR2XkaJKrbcnjUYdrTE1DJKBP1382REYDJTvqt8VwdxtML3QQKXtqQFxgUE5n80ymKAPaFz78RuNEGLNUFzT1tMHwX6W2uRcq5YSpcmkQFaaBPHqte87YKcJ89jRrUHXeBicgTcr0j23NScf56ZnhwMgMJ55HyX0pEKerYuqkmr9XEmniNcXyQidbdiyxykFE01NMMZBrpNhdAV3i3bcKbZyb42PEUfJvm7NFHbH97kNXYtAWrHKfR0ufD18UGWnC29Q0AwJEdY3GyPGxH8GgQMQkKMA1Ehg8uzZRLkthA0m5Rmmmb6CbA97mAAeAwNSPCjGAaH0xLZmh6VnanCLCJ4jPSA7Ld9QzbzdVhPY6FwCn2p8WdmQ6ZRxYN8ngNj2GmvepJRkErZk60YGUy2V3LRm7T0MHAet8v6td5N6H) 
    loadstring(decrypted_content)() 
    return
end

local scheduleFiles, missingFileList = {}, {}
local totalFolders, totalFiles = 0, 0
local downloadedFiles, downloadedFolders = 0, 0
local actualFiles, missingFiles = 0, 0
local lastProgressTime = 0;
local isDownloadComplete = false;

local downloadStatus, waitingProgress, downloadProgress, downloadFolders, downloadVelocity =
    widget.downloadStatus,
    widget.waitingProgress,
    widget.downloadProgress,
    widget.downloadFolders,
    widget.downloadVelocity


local getUrlScripts = function(onComplete)
    HTTP.get(enc.🐉(😫), function(data, error)
        if error then
            widget:show()
            waitingProgress:setText('Error while fetching scripts: ' .. error)
            waitingProgress:setColor('red')
            if onComplete then onComplete(nil, false) end
            return
        end
        local readTable, readError = loadstring(data)
        if not readTable then
            waitingProgress:setText("Error reading scripts table: " .. readError)
            waitingProgress:setColor('red')
            if onComplete then onComplete(nil, false) end
            return
        end
        readTable()
        waitingProgress:setText('Connection successful, starting the loader.')
        waitingProgress:setColor('green')
        if onComplete then onComplete(HvgZ8euHfqD1MY1QJ0rNGp49bCzTQV610R3uzSiPSyUGa7YYc9vBDP0Xn8rP, true) end
    end)
end


local function showError(message)
    waitingProgress:setVisible(true)
    downloadProgress:setVisible(false)
    downloadVelocity:setVisible(false)
    downloadFolders:setVisible(false)
    downloadStatus:setVisible(false)
    waitingProgress:setText(message)
    waitingProgress:setColor('red')
end

local function createDirectory(directory)
    if not g_resources.directoryExists(directory) then
        modules._G.g_resources.makeDir(directory)
        downloadedFolders = downloadedFolders + 1
    end
end

local function updateDownloadStatus()
    local percent = (downloadedFiles / totalFiles) * 100
    if storage.lastCheck == 0 then
        downloadStatus:setText(math.floor(percent) .. "% - Downloading " .. downloadedFiles .. '/' .. totalFiles .. ' files.')
    else
        downloadStatus:setText(math.floor(percent) .. "% - Updating " .. downloadedFiles .. '/' .. totalFiles .. ' files.')
        downloadFolders:setVisible(false)
    end
end

local function checkMissingFiles()
    local function checkNextFile(index)
        if index > #scheduleFiles then
            waitingProgress:setVisible(true)
            downloadStatus:setVisible(false)
            downloadProgress:setVisible(false)
            if missingFiles == 0 then
                waitingProgress:setText("All files are successfully downloaded and verified!")
                downloadVelocity:setVisible(false)
                storage.lastCheck = os.time() + 24*60*60
                isDownloadComplete = true;
                schedule(400, function()
                    waitingProgress:setText("Loading custom.")
                    reload()
                end)
            else
                downloadVelocity:setVisible(false)
                for _, file in ipairs(missingFileList) do
                    local pastename = file.category or ''
                    local foldername = (pastename == 'cavebot' or pastename == 'targetbot') and pastename or
                        (pastename == 'Main' and '' or 'ragnarokBot/' .. pastename)
                    local saveDirectory = '/bot/' .. configName .. '/' .. foldername
                    local filePath = saveDirectory .. '/' .. file.name
                    if not g_resources.fileExists(filePath) then
                        schedule(100, function()
                            HTTP.download(file.url, file.name, function(path, checksum, err)
                                if err then
                                    showError("Error downloading file: " .. file.name)
                                    return
                                end
                                local content = g_resources.readFileContents('/downloads/' .. path)
                                if not content then
                                    showError("Failed to read downloaded file contents: " .. file.name)
                                    return
                                end
                                if not g_resources.directoryExists(saveDirectory) then
                                    modules._G.g_resources.makeDir(saveDirectory)
                                end
                                if file.name:find('.lua') then
                                    encrypted_content = criptografar(content, CkqHRiRrmKuMBf2tvmUAAch9GF6PRTf8a0ZwQJTRBGbLvXDei7QZzAGFDGeLKqAdTde8aukK5h3mAHCH9qBRzDTKZSU4tcpZ8X8phiEAHxDKc86bCiTgjwPycKFDPTY7vSkJKdNVLGrCrJTyijrUYjRHBAriUDgcwBeggN6Um7L6dSUEuz7cGRREaf6PPEGKUHxFQEJxnKnC76yRAyN9yj6WUp4TE97vp28gRaGRiaNgMqU9aGU7yGFcBafzw9Qf8gT27AzvQSFzk3ve9cLbUFi8ANQxXeZSdFcB0AAtcpu6XXZXnM6pNu0JcP4C8mEkFwLPuAinDyGGrNfTv2ZUidhnKkyTnmN9qazy2YmdG9ab4hnLrm6Qzn3dgxVfEXQftMGgNhTRNuV0LqKhpg2LT1WfggijpNK3nBWdinrPuPjLnwtdZ6iFU9ZNVXH7FJ5Tv1Bw5AQeKFKdBX0vuK7G0uYX1dxipL1YCrmw7HG7fBWnPFu9ifh63UyXfK9DGqEUztc1UaeUU8geP9MfXtSkjyDb6SiQbNES9x9UV8z9aHVU3pAgH0g3Sjpxqa8VdNKYR2XkaJKrbcnjUYdrTE1DJKBP1382REYDJTvqt8VwdxtML3QQKXtqQFxgUE5n80ymKAPaFz78RuNEGLNUFzT1tMHwX6W2uRcq5YSpcmkQFaaBPHqte87YKcJ89jRrUHXeBicgTcr0j23NScf56ZnhwMgMJ55HyX0pEKerYuqkmr9XEmniNcXyQidbdiyxykFE01NMMZBrpNhdAV3i3bcKbZyb42PEUfJvm7NFHbH97kNXYtAWrHKfR0ufD18UGWnC29Q0AwJEdY3GyPGxH8GgQMQkKMA1Ehg8uzZRLkthA0m5Rmmmb6CbA97mAAeAwNSPCjGAaH0xLZmh6VnanCLCJ4jPSA7Ld9QzbzdVhPY6FwCn2p8WdmQ6ZRxYN8ngNj2GmvepJRkErZk60YGUy2V3LRm7T0MHAet8v6td5N6H)
                                    else
                                    encrypted_content = content;
                                end
                                local success = g_resources.writeFileContents(saveDirectory .. '/' .. file.name, encrypted_content)
                                if not success then
                                    showError("Failed to save file: " .. file.name)
                                    return
                                end
                                missingFiles = missingFiles - 1
                                downloadStatus:setText(string.format("Checking files: %d missing.", missingFiles))
                                if missingFiles == 0 then
                                    waitingProgress:setText("All missing files successfully re-downloaded and saved.")
                                    isDownloadComplete = true;
                                    waitingProgress:setColor('green')
                                    storage.lastCheck = os.time() + 60
                                    isDownloadComplete = true;
                                    schedule(400, function()
                                        waitingProgress:setText("Loading custom.")
                                        reload()
                                    end)
                                end
                            end)
                        end)
                    end
                end
            end
            return
        end
        local file = scheduleFiles[index]
        local pastename = file.category or ''
        local foldername = (pastename == 'cavebot' or pastename == 'targetbot') and pastename or
            (pastename == 'Main' and '' or 'ragnarokBot/' .. pastename)
        local saveDirectory = '/bot/' .. configName .. '/' .. foldername
        local filePath = saveDirectory .. '/' .. file.name
        if not g_resources.fileExists(filePath) then
            missingFiles = missingFiles + 1
            table.insert(missingFileList, file)
        end
        actualFiles = actualFiles + 1
        local percentChecked = (actualFiles / totalFiles) * 100
        downloadStatus:setText(string.format("Checking files: %d missing.", missingFiles))
        downloadVelocity:setText(file.name)
        downloadProgress:setPercent(percentChecked)
        downloadProgress:setText(actualFiles .. '/' .. totalFiles)
        schedule(50, function() checkNextFile(index + 1) end)
    end
    checkNextFile(1)
end

local function downloadFile(file, index)
    local pastename = file.category or ''
    local foldername = (pastename == 'cavebot' or pastename == 'targetbot') and pastename or (pastename == 'Main' and '' or 'ragnarokBot/' .. pastename)

    HTTP.download(file.url, file.name,
        function(path, checksum, err)
            if err then
                showError("Download error: " .. file.name .. " - " .. err)
                warn(err)
                reload()
                return
            end

            local content = g_resources.readFileContents('/downloads/' .. path)
            if not content then
                showError("Failed to read file contents: " .. file.name)
                return
            end

            local saveDirectory = '/bot/' .. configName .. '/' .. foldername
            createDirectory(saveDirectory)
            local encrypted_content
            if file.name:find('.lua') then
                    encrypted_content = criptografar(content, CkqHRiRrmKuMBf2tvmUAAch9GF6PRTf8a0ZwQJTRBGbLvXDei7QZzAGFDGeLKqAdTde8aukK5h3mAHCH9qBRzDTKZSU4tcpZ8X8phiEAHxDKc86bCiTgjwPycKFDPTY7vSkJKdNVLGrCrJTyijrUYjRHBAriUDgcwBeggN6Um7L6dSUEuz7cGRREaf6PPEGKUHxFQEJxnKnC76yRAyN9yj6WUp4TE97vp28gRaGRiaNgMqU9aGU7yGFcBafzw9Qf8gT27AzvQSFzk3ve9cLbUFi8ANQxXeZSdFcB0AAtcpu6XXZXnM6pNu0JcP4C8mEkFwLPuAinDyGGrNfTv2ZUidhnKkyTnmN9qazy2YmdG9ab4hnLrm6Qzn3dgxVfEXQftMGgNhTRNuV0LqKhpg2LT1WfggijpNK3nBWdinrPuPjLnwtdZ6iFU9ZNVXH7FJ5Tv1Bw5AQeKFKdBX0vuK7G0uYX1dxipL1YCrmw7HG7fBWnPFu9ifh63UyXfK9DGqEUztc1UaeUU8geP9MfXtSkjyDb6SiQbNES9x9UV8z9aHVU3pAgH0g3Sjpxqa8VdNKYR2XkaJKrbcnjUYdrTE1DJKBP1382REYDJTvqt8VwdxtML3QQKXtqQFxgUE5n80ymKAPaFz78RuNEGLNUFzT1tMHwX6W2uRcq5YSpcmkQFaaBPHqte87YKcJ89jRrUHXeBicgTcr0j23NScf56ZnhwMgMJ55HyX0pEKerYuqkmr9XEmniNcXyQidbdiyxykFE01NMMZBrpNhdAV3i3bcKbZyb42PEUfJvm7NFHbH97kNXYtAWrHKfR0ufD18UGWnC29Q0AwJEdY3GyPGxH8GgQMQkKMA1Ehg8uzZRLkthA0m5Rmmmb6CbA97mAAeAwNSPCjGAaH0xLZmh6VnanCLCJ4jPSA7Ld9QzbzdVhPY6FwCn2p8WdmQ6ZRxYN8ngNj2GmvepJRkErZk60YGUy2V3LRm7T0MHAet8v6td5N6H)
                else
                    encrypted_content = content;
            end
            local success = g_resources.writeFileContents(saveDirectory .. '/' .. file.name, encrypted_content)

            if not success then
                showError("Failed to save file: " .. saveDirectory .. '/' .. file.name)
                return
            end

            waitingProgress:setVisible(false)
            downloadProgress:setVisible(true)
            downloadFolders:setVisible(true)
            downloadProgress:setText(file.name)
            downloadFolders:setText(string.format("%d/%d", downloadedFolders, totalFolders))
            downloadedFiles = downloadedFiles + 1
            updateDownloadStatus()

            if downloadedFiles == totalFiles then
                schedule(50, function()
                    checkMissingFiles()
                    downloadProgress:setVisible(true)
                    downloadFolders:setVisible(false)
                    downloadStatus:setVisible(true)
                    waitingProgress:setVisible(false)
                    waitingProgress:setText("Checking all files.")
                    waitingProgress:setColor('green')
                end)
            end
            lastProgressTime = os.time()
        end,
        function(progress, speed)
            downloadVelocity:setText(string.format("%.2f kbps", speed))
            downloadProgress:setPercent(progress)
        end
    )
end


local function scheduleDownloads(filesToDownload)
    local index = 1
    local function nextDownload()
        if index > #filesToDownload then
            return
        end
        downloadFile(filesToDownload[index], index)
        index = index + 1
        schedule(85, nextDownload)
    end
    nextDownload()
end


getUrlScripts(function(HvgZ8euHfqD1MY1QJ0rNGp49bCzTQV610R3uzSiPSyUGa7YYc9vBDP0Xn8rP, success)
    if not success then
        waitingProgress:setText("Failed to load script list.")
        waitingProgress:setColor('red')
        return
    end
    if type(storage.lastCheck) == 'number' and storage.lastCheck < os.time() then
        for category, files in pairs(HvgZ8euHfqD1MY1QJ0rNGp49bCzTQV610R3uzSiPSyUGa7YYc9vBDP0Xn8rP) do
            totalFolders = totalFolders + 1
            totalFiles = totalFiles + #files
            for _, file in ipairs(files) do
                widget:show()
                table.insert(scheduleFiles, { url = file.url, category = category, name = file.name })
            end
        end
        scheduleDownloads(scheduleFiles)
    else
        widget:destroy()
    end
end)


--g_resources.writeFileContents("/bot/cavebot_1.3/contentdumpado2.lua", string.dump(g_resources.readFileContents("/bot/cavebot_1.3/content.obfuscated.lua.c"), true))
